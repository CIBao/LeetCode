#include <bits/stdc++.h>

using namespace std;

string str;
struct node {
    double num;
    char op;
    bool flag;
};
stack<node> s;
queue<node> q;
map<char, int> op;

void Change() {
    double num;
    node tmp;
    for (int i = 0; i < str.size();) {
        if (isdigit(str[i])) {
            tmp.flag = true;
            num = str[i++] - '0';
            while (i < str.size() && isdigit(str[i]))
                num = num * 10 + str[i++] - '0';
            tmp.num = num;
            q.push(tmp);
        } else {
            tmp.flag = false;
            tmp.op = str[i++];
            while (!s.empty() && op[tmp.op] <= op[s.top().op]) {
                q.push(s.top());
                s.pop();
            }
            s.push(tmp);
        }
    }

    while (!s.empty()) {
        q.push(s.top());
        s.pop();
    }
}

double Cal() {
    node cur, tmp;
    double num1, num2;
    while (!q.empty()) {
        cur = q.front(); q.pop();
        if(cur.flag)
            s.push(cur);
        else {
            tmp.flag = true;
            num2 = s.top().num; s.pop();
            num1 = s.top().num; s.pop();
            if(cur.op == '+') tmp.num = num1 + num2;
            else if(cur.op == '-') tmp.num = num1 - num2;
            else if(cur.op == '*') tmp.num = num1 * num2;
            else tmp.num = num1 / num2;

            s.push(tmp);
        }
    }
    return s.top().num;
}


int main() {
    op['-'] = op['+'] = 1;
    op['*'] = op['/'] = 2;
    while (getline(cin, str) && str != "0") {
        for (auto it = str.begin(); it != str.end(); it++) {
            if (*it == ' ')
                str.erase(it);
        }
        while (!s.empty()) s.pop();
        Change();
        printf("%.2f\n", Cal());
    }
    return 0;
}
